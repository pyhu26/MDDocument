@using MatBlazor
@using Microsoft.AspNetCore.Components
@using System.IO

<div class="top-row pl-4 navbar">
    <a class="navbar-brand" href="">MDDocument</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div >
    <MatNavMenu>

        @if (DirectoryInfos == null)
        {
            <MatNavItem> no files C&nbsp; <MatIcon Icon="explore"></MatIcon></MatNavItem>
        }
        else
        {
            //한단계 아래에 있는 폴더만 서ㅊ
            @foreach (var di in DirectoryInfos.GetDirectories())
            {
                string directoryName = di.Name;
                <MatNavSubMenu>
                    <MatNavSubMenuHeader>
                        <MatNavItem AllowSelection="false"><MatIcon Icon="all_inbox"></MatIcon>&nbsp; @directoryName </MatNavItem>
                    </MatNavSubMenuHeader>

                    @foreach (var file in di.GetFiles())
                    {
                        string routePrefix = "markdown/" + directoryName + "/";
                        string fileName = file.Name.Split(new char[] { '.' }).FirstOrDefault();
                        string routePath = routePrefix + fileName;
                        <MatNavSubMenuList>
                            <MatNavItem Href="@routePath"> @fileName &nbsp; <MatIcon Icon="explore"></MatIcon></MatNavItem>
                        </MatNavSubMenuList>
                    }
                </MatNavSubMenu>
            }

            //루트에 있는 파일들
            foreach (var file in DirectoryInfos.GetFiles())
            {
                string routePrefix = "markdown/";
                string fileName = file.Name.Split(new char[] { '.' }).FirstOrDefault();
                string routePath = routePrefix + fileName;
                <MatNavItem Href="@routePath"> @fileName &nbsp; <MatIcon Icon="explore"></MatIcon></MatNavItem>
            }
        }

    </MatNavMenu>
    </div>

    @code{

        bool navSubMenuOpenState;

        DirectoryInfo DirectoryInfos { get; set; }


        private bool collapseNavMenu = false;

        private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

        private void ToggleNavMenu()
        {
            collapseNavMenu = !collapseNavMenu;
        }

        protected override async Task OnInitializedAsync()
        {
            base.OnInitialized();

            await GetDirectoryInfoAsync();
        }

        async Task GetDirectoryInfoAsync()
        {
            string currPath = Path.Combine(Environment.CurrentDirectory, "MdFiles");
            DirectoryInfo di = new DirectoryInfo(currPath);

            this.DirectoryInfos = di;
        }


    }
